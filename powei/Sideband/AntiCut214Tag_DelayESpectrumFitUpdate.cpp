#include "RooRealVar.h"
#include "RooDataSet.h"
#include "RooGaussian.h"
#include "RooChebychev.h"
#include "RooAddPdf.h"
#include "RooWorkspace.h"
#include "RooPlot.h"
#include "TCanvas.h"
#include "TAxis.h"
#include "TFile.h"
#include "TH1.h"
using namespace RooFit;
// Function to calculate the total bin values of a RooAbsPdf within a specified subrange
double getTotalBinValuesForSubrange(RooAbsPdf* pdf, RooRealVar* var, int numBins, double rangeMin, double rangeMax) {
    // Initialize the total bin value
    double totalBinValue = 0.0;

    // Validate the specified range
    if (rangeMin < var->getMin() || rangeMax > var->getMax() || rangeMin >= rangeMax) {
        std::cerr << "Error: Specified range is outside the bounds of the RooRealVar or invalid." << std::endl;
        return totalBinValue;
    }

    // Compute the bin width
    double binWidth = (rangeMax - rangeMin) / numBins;

    // Loop over bins within the specified subrange
    for (int i = 0; i < numBins; ++i) {
        // Set the variable to the center of the bin
        double binCenter = rangeMin + (i + 0.5) * binWidth;
        var->setVal(binCenter);  // Set the value of the variable to the center of the bin

        // Calculate the value of the PDF at the center of the bin
        double binValue = pdf->getVal();  // Get the value of the PDF at the center
        std::cout<<"binValue "<<binValue<<std::endl;
        // Add the value of the PDF at the bin center multiplied by the bin width to the total
        totalBinValue += binValue ;  // Bin height * bin width = bin area

        // Optional: Print the value for debugging
        // std::cout << "Bin " << i << " center: " << binCenter << " value: " << binValue << std::endl;
    }

    // Return the total bin value for the subrange
    return totalBinValue;
}
std::vector<std::string>  readrunidfromtable(const std::string& filename){
    std::vector<std::string> indexes;
    //std::ifstream inputFile("/home/huangp/BiPo/PhysicsRunList/bismsb_bipo214_simlist.txt");
    std::ifstream inputFile(filename);

    if (!inputFile.is_open()) {
        std::cerr << "Error opening file: " << filename << std::endl;
        return indexes;
    }

    std::string index;
    while (inputFile >> index) {
        //std::cout << index <<std::endl;
        indexes.push_back(index);
    }

    inputFile.close();
    return indexes;

} 
void fixParameters(RooAbsPdf* pdf) {
    if (!pdf) {
        std::cerr << "Error: PDF is null!" << std::endl;
        return;
    }

    // Retrieve the parameters of the PDF
    RooArgSet* parameters = pdf->getParameters(RooArgSet());
    
    // Iterate over the parameters and fix them
    RooRealVar* param;
    // Use the iterator of RooArgSet to loop over the parameters
    for (TIterator* iter = parameters->createIterator(); (param = (RooRealVar*) iter->Next());) {
        // Fix each parameter
        param->setConstant(true);
        std::cout << "Fixed parameter: " << param->GetName() << " with value: " << param->getVal() << std::endl;
    }

}


void AntiCut214Tag_DelayESpectrumFitUpdate()
{
   int simbins = 38; double startbin = 0.6; double endbin =2.5;


   std::vector<double> mcR; std::vector<double> R ; std::vector<double> R_4m; std::vector<std::string> runid;
   std::string runlist; std::string Eventtype; 
   runlist =  "/home/huangp/AntiNu/antinu_runlist_UPDATED.txt";
   
   runid = readrunidfromtable(runlist);

   TChain* Tc = new TChain("DelayT"); 
   double post_prob, delayedecorr,dt;
   Tc->SetBranchAddress("dt", &dt);
   Tc->SetBranchAddress("delayedEcorr", &delayedecorr);
   TNtuple* nt = new TNtuple("nt","nt","delayedEcorr"); 
   std::string filepath =  "/data/snoplus3/weiii/antinu/mycuts/Ntuple_data_0.6Delay/data/";
   for (size_t irun = 0; irun < runid.size(); ++irun){
      std::string input_file  = runid[irun]+"*.ntuple.root";


      Tc->Add( (filepath+input_file).c_str());
      
      // check this run number exists or not
      if(Tc->GetEntries() == 0){
         std::cerr << "No such file or Error opening recon file in run: "<< runid[irun]<< std::endl;
         //exit(-1);
      }
   }
   TH1D *Data_energyh1  = new TH1D("Data_energyh1","",simbins,startbin ,endbin);
   for (int iEntry = 0; iEntry < Tc->GetEntries(); iEntry++){
      Tc->GetEntry(iEntry);
        //if(dt>800.){
            nt->Fill(delayedecorr);
        //}
      
   }
   // R e a d   w o r k s p a c e   f r o m   f i l e
   // -----------------------------------------------
 
   // Open input file with workspace (generated by rf503_wspacewrite)
   TFile *f = new TFile("/home/huangp/AntiNu/Analysis/Sideband/delayEGausfit.root");
   TFile *f2 = new TFile("/home/huangp/AntiNu/Analysis/Sideband/sidebandkdefit.root");
   TFile *f3 = new TFile("/home/huangp/AntiNu/Analysis/Sideband/Po214alphaFit.root");
   TFile *f4 = new TFile("/home/huangp/AntiNu/Analysis/Sideband/Po214alphagammaFit.root");
   TFile *f5 = new TFile("/home/huangp/AntiNu/Analysis/Sideband/Po212alphaFit.root");
   TFile *f6 = new TFile("/home/huangp/AntiNu/Analysis/Sideband/Sideband_ROI_KDEFit.root");
 
   // Retrieve workspace from file
   RooWorkspace *w = (RooWorkspace *)f->Get("w");
   RooWorkspace *w2  = (RooWorkspace *)f2->Get("w_Po215");
   RooWorkspace *w3  = (RooWorkspace *)f3->Get("w_alpha");
   RooWorkspace *w4  = (RooWorkspace *)f4->Get("w_alphagamma");
   RooWorkspace *w5  = (RooWorkspace *)f5->Get("w");
   RooWorkspace *w6  = (RooWorkspace *)f6->Get("w2");
 
   // R e t r i e v e   p d f ,   d a t a   f r o m   w o r k s p a c e
   // -----------------------------------------------------------------
 
   // Retrieve x,model and data from workspace
   RooRealVar *x = w->var("delayedEcorr");
   RooAbsPdf *gaus = w->pdf("NCgaus");
   RooDataSet* neutroncapture_data = dynamic_cast<RooDataSet*>(w->data("data"));
   RooRealVar* mu = w->var("mu");mu->setConstant(true);
   RooRealVar* sigma = w->var("sigma");sigma->setConstant(true);

   RooRealVar *x2 = w2->var("delayedEcorr");
   //RooAddPdf *k1 = (RooAddPdf*)w2->pdf("model");
   RooAbsPdf *k1 = w2->pdf("k1");
   RooDataSet* Sideband_data = dynamic_cast<RooDataSet*>(w2->data("data"));

   RooRealVar *x3 = w3->var("delayedEcorr");
   RooAbsPdf *gaus3 = w3->pdf("gaus_alpha");
   RooDataSet* Po214alpha_data = dynamic_cast<RooDataSet*>(w3->data("data"));
   RooRealVar* mu3 = w3->var("mu_alpha");mu3->setConstant(true);
   RooRealVar* sigma3 = w3->var("sigma_alpha");sigma3->setConstant(true);

   RooRealVar *x4 = w4->var("delayedEcorr");
   RooAbsPdf *gaus4 = w4->pdf("gaus_alphagamma");
   RooDataSet* Po214alphagamma_data = dynamic_cast<RooDataSet*>(w4->data("data"));
   RooRealVar* mu4 = w4->var("mu_alphagamma");mu4->setConstant(true);
   RooRealVar* sigma4 = w4->var("sigma_alphagamma");sigma4->setConstant(true);

   
   RooRealVar *x5 = w5->var("delayedEcorr");
   RooAbsPdf *k5 = w5->pdf("k_212");
   RooDataSet* Po212alpha_data = dynamic_cast<RooDataSet*>(w5->data("data"));

   RooRealVar *x6 = w6->var("delayedEcorr");
   RooAbsPdf *k6 = w6->pdf("newscaleKDE");
   //RooDataSet* Sideband_data_Tail = dynamic_cast<RooDataSet*>(w2->data("k1Data"));
   //std::cout<<"Sideband_data_Tail "<<Sideband_data_Tail->sumEntries()<<std::endl;

   
   double Ratio_Tail_214alpha = 0.00215249; // get from sideband_copy.cpp
   RooRealVar scale_214alphagamma("scale_214alphagamma", "Po214 alphagamma", 1.04e-05);
   RooRealVar scale_214Tail("scale_214Tail", "Po214 Tail",Ratio_Tail_214alpha );
   RooAddPdf* Po214model = new RooAddPdf("Po214model","Po214model",RooArgList(*gaus4,*k6,*gaus3),RooArgList(scale_214alphagamma,scale_214Tail));

   // Define free scaling factors (parameters for normalization)
   // Form A*Po214model+B*Po212model+C*NCmodel+D*Po215model
   double A_nom  = nt->GetEntries("delayedEcorr<0.8 && delayedEcorr<0.9");
   double B_nom  = nt->GetEntries("delayedEcorr>0.9 && delayedEcorr<1.3");
   double C_nom  = nt->GetEntries("delayedEcorr>1.8");
   double D_nom  = nt->GetEntries("delayedEcorr<1.8");
   RooRealVar A("A", "Normalization factor for 214", A_nom,A_nom/10.,A_nom*10.);
   RooRealVar B("B", "Normalization factor for 212", B_nom,B_nom/10.,B_nom*10.);
   RooRealVar C("C", "Normalization factor for NC", C_nom,C_nom/10.,C_nom*10.);
   RooRealVar D("D", "Normalization factor for Sideband", D_nom,D_nom/10.,D_nom*10.);
   RooAddPdf* model = new RooAddPdf("model","model",RooArgList(*Po214model,*k5,*gaus,*k1),RooArgList(A,B,C,D));

   RooRealVar delayedEcorr("delayedEcorr","delayedEcorr",startbin,endbin);

   RooDataSet* data = new RooDataSet("data", "data", nt, RooArgSet(delayedEcorr));
   data->Print("v");

   
   // Print structure of composite pdf
 
   // F i t   m o d e l   t o   d a t a ,   p l o t   m o d e l
   // ---------------------------------------------------------
 
   // Fit model to data
   model->fitTo(*data,Minos(true));
   
   // Plot data and PDF overlaid
   RooPlot*xframe = delayedEcorr.frame();
   
  
   
   
   
   data->plotOn(xframe);
   model->plotOn(xframe,LineColor(kBlack),Name("Total Model"));
   model->plotOn(xframe,Components(*Po214model),LineStyle(7),LineColor(kGreen),Name("214"));
   model->plotOn(xframe,Components(*k5),LineStyle(7),LineColor(kRed),Name("212"));
   model->plotOn(xframe,Components(*gaus),LineStyle(7),LineColor(kBlue),Name("NC"));
   model->plotOn(xframe,Components(*k1),LineStyle(7),LineColor(kOrange),Name("215"));
   
 
 
   // Draw the frame on the canvas
   new TCanvas("rf503_wspaceread", "rf503_wspaceread", 600, 600);
   gPad->SetLeftMargin(0.15);
   gPad->SetLogy(1);
   xframe->GetYaxis()->SetTitleOffset(1.4);
   TLegend *leg1 = new TLegend(0.5, 0.68, 0.90, 0.9);

   leg1->SetTextSize(.04);
   leg1->SetTextFont(42);
   //leg1->SetFillColor(kWhite);
   //leg1->SetLineColor(kWhite);
   
   leg1->AddEntry(xframe->findObject("data"),"Data","P");
   leg1->AddEntry(xframe->findObject("Total Model"),"All Fit", "L");
   leg1->AddEntry(xframe->findObject("214"),"Po214", "L");
   leg1->AddEntry(xframe->findObject("212"),"Po212", "L");
   leg1->AddEntry(xframe->findObject("NC"),"NC", "L");
   leg1->AddEntry(xframe->findObject("215"),"Po215", "L");

   xframe->Draw("E0");

   leg1->Draw("same");  
   
   
   RooRealVar* Po214_norm = dynamic_cast<RooRealVar*>(model->getVariables()->find("A"));
   double Po214_norm_const     = Po214_norm->getVal();
   double Po214_norm_const_err = Po214_norm->getError();
   std::cout<< "Po214_norm "<<Po214_norm_const<<std::endl;
   
   
   double fraction_aboveNC = 1.15647e-04; //the fraction of Po214KDE above 1.85 with all -> Get From Sideband_copy.cpp
   
   std::cout << "Integrated value of KDE in the region [" << 1.85 << ", " << 2.5 << "] is: " 
            << Po214_norm_const* fraction_aboveNC <<"+-"<<Po214_norm_const_err*fraction_aboveNC<< std::endl;
    
   
}